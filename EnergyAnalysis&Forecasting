%% Energy Analysis and Forecasting
%#function dfhistbins

% This demo showcases visualization and analysis (heavy statistics) for
% forecasting energy usage based on historical data. We have access to
% hour-by-hour utility usage for the month of January, including
% information on the day of the week and the Heating Degree Days (defined
% as 65 minus Average Temperature) of each day. Using this information, we
% will come up with an algorithm for forecasting future energy usage based
% on parameters such as day-type, forecasted temperature, and time of day.

%% Clear the workspace

clear all;
close all;
clc

set(0, 'defaultFigureWindowStyle', 'docked');


%% Load Data
% Load data from excel worksheet
fileName   = 'January.xls';
sheetName  = 'Produced'  ;
energyData = xlsread(fileName, sheetName  , 'B2:Y32');
DayType    = xlsread(fileName, 'Weather'  , 'B2:B32');
HDD        = xlsread(fileName, 'Weather'  , 'C2:C32'); %Heating Degree Days
Temp       = xlsread(fileName, 'Weather'  , 'D2:D32');



numDays   = size(energyData,1);
numHours  = size(energyData,2);

allDays   = {'Monday', 'Tuesday', 'Wednesday', 'Thursday', ...
  'Friday', 'Saturday', 'Sunday'};

%--------------------------------------------------------------------
%% Visualization
% Quick visualization of data (in 3D and contour)
%-------------
%myCreateFigure(energyData);
%-------------
% Create figure
  figure1 = figure('Units','Pixels','Position',[200, 200, 800, 400]);

  % Create subplot
  subplot1 = subplot(1,2,1,'Parent',figure1);
  % Uncomment the following line to preserve the X-limits of the axes
  xlim([1 24]);
  % Uncomment the following line to preserve the Y-limits of the axes
  ylim([1 31]);
  view([-37.5 30]);
  grid('on');
  hold('all');

  zdata1=energyData;
  % Create surf
  surf(zdata1,'Parent',subplot1,'EdgeLighting','flat','FaceLighting','none',...
    'LineWidth',1.5,...
    'FaceColor',[1 1 1],...
    'EdgeColor',[0 0 1]);

  % Create xlabel
  xlabel('hours');

  % Create ylabel
  ylabel('days');

  % Create zlabel
  zlabel('system load (MW)');

  % Create axes
  axes1 = axes('Parent',figure1,'Position',[0.5703 0.11 0.3751 0.815],...
    'Layer','top');     %AXES('position', RECT) opens up an axis at the specified location
                       %and returns a handle to it.
  % Uncomment the following line to preserve the X-limits of the axes
  xlim([1 24]);
  % Uncomment the following line to preserve the Y-limits of the axes
  ylim([1 31]);
  box('on');
  hold('all');

  % Create title
  title('System Load (MW)');

  % Create contour
  contour(zdata1,'LineColor',[0 0 0],'Fill','on','DisplayName','data',...
    'Parent',axes1);

  % Create xlabel
  xlabel('hours');

  % Create ylabel
  ylabel('days');

  % Create colorbar
  colorbar('peer',axes1);

% figure creation has finished
%--------------------------------------------------------------------






%---------------------------------------------------------------------
%% Statistics - Examine Distribution
% In order to do some statistics, it is going to be determined the distribution
% type of this data set.

% Create an average day
averageDayProfile = mean(energyData);

% Use curve fitting to compute the average for the month at specified time.
% cftool(1:24,averageDayProfile)
figure
%-------------------------------
%myCurveFit(averageDayProfile, 15)
%--------------------------------
%MYCURVEFIT    Create plot of datasets and fits
%   MYCURVEFIT(AVERAGEDAY)
%   Creates a plot, similar to the plot in the main curve fitting
%   window, using the data that you provide as input.  You can
%   apply this function to the same data you used with cftool
%   or with different data.  You may want to edit the function to
%   customize the code and this help message.
%
%   Number of datasets:  1
%   Number of fits:  1

 
% Data from dataset "averageDay":
%    Y = averageDay:
%    Unweighted
%

% Set up figure to receive datasets and fits
averageDay=averageDayProfile;
thehour=15;
f_ = clf; %CLF deletes all children of the current figure with visible handles
figure(f_);
set(f_,'Units','Pixels','Position',[318 118.5 680 477]);
xlim_ = [Inf -Inf];       % limits of x axis
ax_ = axes;  %AXES   Create axes in arbitrary positions
set(ax_,'Units','normalized','OuterPosition',[0 0 1 1]);%SET(H,'PropertyName',PropertyValue) sets the value of the
                                                        %specified property for the graphics object with handle H.
                                                        %H can be a vector of handles, in which case SET sets the
                                                        %properties' values for all the objects
set(ax_,'Box','on');
axes(ax_); hold on;

 
% --- Plot data originally in dataset "averageDay"
x_1 = (1:numel(averageDay))';  %N = NUMEL(A) returns the number of elements, N, in array A
averageDay = averageDay(:);
h_ = line(x_1,averageDay,'Parent',ax_,'Color',[0.333333 0 0.666667],...
     'LineStyle','none', 'LineWidth',1,...
     'Marker','.', 'MarkerSize',12);
xlim_(1) = min(xlim_(1),min(x_1));
xlim_(2) = max(xlim_(2),max(x_1));

% Nudge axis limits beyond data limits
if all(isfinite(xlim_))
   xlim_ = xlim_ + [-1 1] * 0.01 * diff(xlim_);
   set(ax_,'XLim',xlim_)
end


% --- Create fit "fit 1"
ok_ = isfinite(x_1) & isfinite(averageDay); %ISFINITE(X) returns an array that contains 1's where
                                             %the elements of X are finite and 0's where they are not.


st_ = [0 0 0 0 0 0 0 0 0 0 0 0.2731819698774 ];
ft_ = fittype('fourier5'); %FITTYPE(TYPE) constructs a FITTYPE object that is of type TYPE

% Fit this model using new data
cf_ = fit(x_1(ok_),averageDay(ok_),ft_,'Startpoint',st_);

% Or use coefficients from the original fit:
if 0
   cv_ = { 45.34421881175, -5.786363954186, -7.023252780652, -1.630929590598, -4.891585635542, -0.5298981900424, 1.512461132015, 0.2971460770778, 0.5534208653571, -0.6487411378073, -0.7572297602488, 0.2642948447239};
   cf_ = cfit(ft_,cv_{:}); %CFIT(MODEL,COEFF1,COEFF2,COEFF3,...) constructs a CFIT object from the MODEL and the COEFF values.
 end

% Plot this fit
h_ = plot(cf_,'fit',0.95);
legend off;  % turn off legend from plot method call
set(h_(1),'Color',[1 0 0],...
     'LineStyle','-', 'LineWidth',2,...
     'Marker','none', 'MarkerSize',6);

% Done plotting data and fits.  Now finish up loose ends.
hold off;

%% Evaluate

power = feval(cf_, thehour);
vline(thehour, 'r', sprintf('Est. Power at %.1f is %.1f MW\n', thehour, power));% Draws a vertical line on the current axes at the location specified by 'x'

%the curve fitting has finished
%----------------------------------------




%------------------------------------------------------------------------
% Expand to an average month
averageMonth      = meshgrid(averageDayProfile, 1:31);

% Look at difference between average month
res               = energyData - averageMonth;


figure
%---------------
%myDistFit(res);
%---------------
%% Visualize Confidence Intervals
% From the distribution analysis, I will conclude that the data set has a
% normal distribution. With this information, we can perform more in-depth
% statistics based on normal distribution.
%
% The following custom plotting routine takes |data| as an input, calculate
% the estimated mean and 95% confidence interval of the mean, and plots the
% the results.

%MYDISTFIT    Create plot of datasets and fits
%   MYDISTFIT(Y)
%   Creates a plot, similar to the plot in the main distribution fitting
%   window, using the data that you provide as input.  You can
%   apply this function to the same data you used with dfittool
%   or with different data.  You may want to edit the function to
%   customize the code and this help message.
%
%   Number of datasets:  1
%   Number of fits:  1

%#function dfhistbins


% Data from dataset "y data":
%    Y = y
 
% Force all inputs to be column vectors
y=res
y = y(:);

% Set up figure to receive datasets and fits
f_ = clf;
figure(f_);
%set(f_,'Units','Pixels','Position',[100 100 680 468.45]);
legh_ = []; legt_ = {};   % handles and text for legend
ax_ = newplot;
set(ax_,'Box','on');
hold on;

% --- Plot data originally in dataset "y data"
t_ = ~isnan(y);  %ISNAN  True for Not-a-Number
Data_ = y(t_);   
[F_,X_] = ecdf(Data_,'Function','cdf');  % compute empirical cdf
       %[F,X] = ECDF(Y) calculates the Kaplan-Meier estimate of the
     %   cumulative distribution function (cdf), also known as the empirical
    %   cdf.  Y is a vector of data values.  F is a vector of values of the
    %  empirical cdf evaluated at X.   


Bin_.rule = 1;
[C_,E_] = dfswitchyard('dfhistbins',Data_,[],[],Bin_,F_,X_); %DFSWITCHYARD switchyard for Distribution Fitting.
  %Helper function for the Distribution Fitting tool

[N_,C_] = ecdfhist(F_,X_,'edges',E_); % empirical pdf from cdf (ECDFHIST Create histogram from ecdf output)
h_ = bar(C_,N_,'hist');
set(h_,'FaceColor','none','EdgeColor',[0.333333 0 0.666667],...
       'LineStyle','-', 'LineWidth',1);
xlabel('Data');
ylabel('Density')
legh_(end+1) = h_;
legt_{end+1} = 'y data';

% Nudge axis limits beyond data limits
xlim_ = get(ax_,'XLim');
if all(isfinite(xlim_))
   xlim_ = xlim_ + [-1 1] * 0.01 * diff(xlim_);
   set(ax_,'XLim',xlim_)
end

x_ = linspace(xlim_(1),xlim_(2),100);

% --- Create fit "Normal Dist"

% Fit this distribution to get parameter values
t_ = ~isnan(y);
Data_ = y(t_);
% To use parameter estimates from the original fit:
%     p_ = [ -1.117385753816e-015, 2.510740785629];
pargs_ = cell(1,2);
[pargs_{:}] = normfit(Data_, 0.05);
p_ = [pargs_{:}];
nlogl_ = normlike(p_, Data_); %NORMLIKE Negative log-likelihood for the normal distribution.
y_ = normpdf(x_,p_(1), p_(2)); %NORMPDF Normal probability density function (pdf).
    %Y = NORMPDF(X,MU,SIGMA) returns the pdf of the normal distribution with
    %mean MU and standard deviation SIGMA, evaluated at the values in X.
    %The size of Y is the common size of the input arguments.  A scalar
    %input functions as a constant matrix of the same size as the other
    %inputs.
    
h_ = plot(x_,y_,'Color',[1 0 0],...
          'LineStyle','-', 'LineWidth',2,...
          'Marker','none', 'MarkerSize',6);
legh_(end+1) = h_;
legt_{end+1} = 'Normal Dist';

hold off;
leginfo_ = {'Orientation', 'vertical', 'Location', 'NorthEast'}; 
h_ = legend(ax_,legh_,legt_,leginfo_{:});  % create legend
set(h_,'Interpreter','none');
title(sprintf('Negative log-likelihood: %g', nlogl_));

%-----------------------------------------------------------------------


% Mean, Standard Deviation, and Confidence Intervals
[meanD,stdevD,ciD] = normfit(energyData );    % across days
[meanH,stdevH,ciH] = normfit(energyData');    % across hours


%-----------------------------------------------------------------------
% Plot the confidence interval
%----------------
%plotCI(energyData,meanD,stdevD,ciD,meanH,stdevH,ciH);
%--------------

  
% plotCI(data, m1, s1, mci1, m2, s2, mci2)
%   Plot profiles, average profiles, and confidence intervals
%
% Input:
%   data - historical energy usage data
%   m1 - mean daily profile
%   s1 - standard deviation of daily profile
%   ci1 - 95% confidence interval of daily profile
%   m2 - mean month profile
%   s2 - standard deviation of month profile
%   ci2 - 95% confidence interval of month profile

%% Get number of days and number of hours

data=energyData
m1=meanD
s1=stdevD
ci1=ciD
m2=meanH
s2=stdevH
ci2=ciH

  numDays  = size(data, 1);
  numHours = size(data, 2);

%% Create Figure
  figure('Units', 'Pixels', 'Position', [100, 100, 800, 400]);
  
  % Create subplot for visualizing daily profile
  subplot(1,2,1);
  plot(data', 'Color', [.8 .8 .8]);
  patch([1:numHours,numHours:-1:1],[ci1(1,:), ci1(2,end:-1:1)], [.8 .8 .8])
  line(1:numHours, m1, 'Linewidth', 2, 'Color', 'r');
  grid on; xlim([1 numHours]);
  xlabel('hours');
  ylabel('system load (MW)');
  title('Daily Profile (mean & CI)');

  % Create subplot for visualizing month profile
  subplot(1,2,2);
  plot(data, 'Color', [.8 .8 .8]);
  patch([1:numDays,numDays:-1:1],[ci2(1,:), ci2(2,end:-1:1)], [.8 .8 .8])
  line(1:numDays, m2, 'Linewidth', 2, 'Color', 'r');
  grid on;xlim([1 numDays]);
  xlabel('days');
  ylabel('system load (MW)');
  title('Month Profile (mean & CI)');
  
  
%%-----------------------------------------------------------------------
% *Observations*
%
% As you can see, the daily profile seems to have a very tight confidence
% interval, suggesting that the general trend throughout the day is similar
% from day to day.




%% Average Day Effects
% By looking at average profiles for each day of the week, we can make some
% observations on daily trends.

% Separate each day from the total data, and take its mean
for dayOfWeek = 1:7  % Monday thru Sunday
   checkDays                 = DayType==dayOfWeek      ;
   foundDays                 = energyData(checkDays,:) ;
   aveByWeekDay(dayOfWeek,:) = mean(foundDays,1)       ;%#ok
end

% Plot the results
figure;
plot(aveByWeekDay');
xlabel('hours');
ylabel('system load (MW)');
legend(allDays{:}, 'Location', 'Best');

%%
% *Observations*
%
% We can see that the morning energy spike is not prominent on the
% weekends. Also, Mondays tend to have more usage throughout the day, and
% Saturdays have the lowest usage.




%************************************************************************
%************************************************************************
%% Energy Usage Predictions
% Forecast usage based on time of day and day of week.

dayOfWeek = 'Monday';

timeOfDay = 15      ;   % 3PM

% call a function for estimating energy usage
%-------------------
%estimateSingleDay(energyData, DayType, dayOfWeek, timeOfDay);
%---------------------

% estimateSingleDay(energyData, DayType, dayOfWeek, timeOfDay)
%   Estimates energy usage for a particular day and time based on
%   historical data.
%
%   Inputs:
%     energyData - historical energy usage data
%     DayType    - information on the day of the week
%     dayOfWeek  - the day of interest
%     timeOfDay  - the hour(s) of interest


allDays   = {'Monday', 'Tuesday', 'Wednesday', 'Thursday', ...
  'Friday', 'Saturday', 'Sunday'};

singleDay = energyData(DayType == strmatch(dayOfWeek, allDays), :);
[singleDayMean, singleDayStDev, singleDayCI] = normfit(singleDay);
sysLoad   = singleDayMean(timeOfDay)
sysLoadCI = singleDayCI(:, timeOfDay)

% Visualize
figure;
plot(singleDay');hold on;
plot(singleDayMean, 'linewidth', 4);
plot([timeOfDay;timeOfDay], sysLoadCI, 'r', 'linewidth', 2)
plot(timeOfDay, sysLoad, 'r.', 'markersize', 30);
xlabel('hours');
ylabel('system load (MW)');
title(sprintf('Estimate for %ss & 95%% CI', dayOfWeek));
hold off;

%------------------------------------------------------------------------




%% Correlation with Heating Degree Days
% We have a single piece of information per day regarding the temperature
% of each day (Heating Degree Days). Let's try to see if this information
% can be used as an indicator for any of the statistics of the profile. We
% can determine this by examining the correlation coefficients between HDD
% and the various statistical parameters.

% calculate other statistics

medianH = median(energyData, 2    );
minH    = min   (energyData, [], 2);
maxH    = max   (energyData, [], 2);
rangeH  = range (energyData, 2    );

% Calculate a matrix of correlation coefficients and a matrix of p-values.
% We're only interested in the first row (or column) of the matrices, since
% we want to see how "hdd" correlates to the other variables
[R,P] = corrcoef([HDD,meanH',medianH,minH,maxH,rangeH,stdevH']);

% Display on screen
fprintf('      ');fprintf('%7s ', 'mean', 'median', 'min', 'max', 'range', 'stdev');fprintf('\n');
fprintf('corr: ');fprintf('%7.4f ', R(2:end,1));fprintf('\n');
fprintf('p-val:');fprintf('%7.4f ', P(2:end,1));fprintf('\n');

%%
% *Observations*
%
% Correlation of 1 means perfect positive correlation. The result seems to
% show that Heating Degree Days is a good indicator of the *maximum system
% load* for that day. It has relatively *high correlation* and is
% *significant*.

%% Conclusion
% We explored historical energy usage data to develop a forecasting system.
% Statistics and visualizations revealed that there are usage trends
% throughout the day, and the trends seem to depend on the day of the week.
% This knowledge can be used for a gross forecast of the energy usage. We
% also found that there are some correlations between the Heating Degree
% Days (HDD) and certain statistical parameters of the profile. We may use
% this information to fine tune our forecast.
%
% Further analysis may provide more insights to developing this forecasting
% system.

%% Code Cleanup

set(0, 'defaultFigureWindowStyle', 'remove');


%end
